import { ApolloServer } from "apollo-server-micro";
import { DateTime } from "luxon";
import Cors from "micro-cors";
import { NextApiHandler, NextApiRequest, NextApiResponse } from "next";
import { unstable_getServerSession } from "next-auth";
import "reflect-metadata";
import { buildSchemaSync } from "type-graphql";
import {
  CollectionCrudResolver,
  ExternalServiceCredentialRelationsResolver,
  BookmarkRelationsResolver,
  TagRelationsResolver,
  UserRelationsResolver,
} from "../../lib/graphql/server/generated";
import { container } from "../../server/container";
import { IContextProvider } from "../../server/context/ContextProvider";

import {
  CollectionRelationsResolver,
  ExternalServiceResolver,
  BookmarkResolver,
  TagResolver,
  UserResolver,
} from "../../server/resolvers";
import { CustomCollectionResolver } from "../../server/resolvers/CustomCollectionResolver";
import { PrismaService } from "../../server/services/PrismaService";
import { authOptions } from "./auth/[...nextauth]";

const cors = Cors();

// Tells Next.js that we don't want it to parse the request body
export const config = {
  api: {
    bodyParser: false,
  },
};

// @ts-ignore - resolved via Next.js webpack override
export const schema = buildSchemaSync({
  resolvers: [
    BookmarkResolver,
    BookmarkRelationsResolver,
    UserResolver,
    TagResolver,
    CollectionCrudResolver,
    CustomCollectionResolver,
    CollectionRelationsResolver,
    TagRelationsResolver,
    UserRelationsResolver,
    ExternalServiceResolver,
    ExternalServiceCredentialRelationsResolver,
  ],
});

const apolloServer = new ApolloServer({
  schema,
  context: async ({ req, res }) => {
    // console.log("LOG_REQ:", req);
    return {
      req,
      res,
      session: await unstable_getServerSession(req, res, authOptions),
      container: container.get<IContextProvider>(
        Symbol.for("IContextProvider")
      ),
      // Need to include prisma in context for autogenerated resolvers
      prisma: container.get<PrismaService>(PrismaService),
    };
  },
});

let apolloServerHandler: NextApiHandler;

async function getApolloServerHandler() {
  if (!apolloServerHandler) {
    await apolloServer.start();

    apolloServerHandler = apolloServer.createHandler({
      path: "/api/graphql",
    });
  }

  return apolloServerHandler;
}

export default cors(async (req, res) => {
  const apolloServerHandler = await getApolloServerHandler();
  if (req.method === "OPTIONS") {
    res.end();
    return;
  }
  return apolloServerHandler(req as NextApiRequest, res as NextApiResponse);
});
