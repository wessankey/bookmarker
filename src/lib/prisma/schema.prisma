generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../graphql/server/generated"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id               String                      @id @default(uuid())
  name             String?
  email            String?                     @unique
  emailVerified    DateTime?
  image            String?
  bookmarks        Bookmark[]
  collections      Collection[]
  accounts         Account[]
  sessions         Session[]
  tags             Tag[]
  externalServices ExternalServiceCredential[]
}

enum Role {
  ADMIN
  USER
}

enum ExternalServiceAuthType {
  USERNAME_AND_PASSWORD
  API_TOKEN
}

enum ExternalServiceType {
  INSTAPAPER
  READWISE
}

model ExternalService {
  id                        String                      @id @default(uuid())
  type                      ExternalServiceType         @unique
  authType                  ExternalServiceAuthType
  ExternalServiceCredential ExternalServiceCredential[]
}

model ExternalServiceCredential {
  id                String          @id @default(uuid())
  externalServiceId String
  username          String?
  password          String?
  apiToken          String?
  userId            String
  externalService   ExternalService @relation(fields: [externalServiceId], references: [id])
  user              User            @relation(fields: [userId], references: [id])

  @@index([externalServiceId])
  @@index([userId])
}

model Bookmark {
  id          String       @id @default(uuid())
  title       String
  description String
  url         String
  userId      String
  createdAt   DateTime     @default(now())
  tags        Tag[]
  collections Collection[]
  User        User         @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Tag {
  id         String    @id @default(uuid())
  value      String    @unique
  userId     String
  tagColor   String
  User       User      @relation(fields: [userId], references: [id])
  Bookmark   Bookmark? @relation(fields: [bookmarkId], references: [id])
  bookmarkId String?

  @@index([userId])
  @@index([bookmarkId])
}

model Collection {
  id          String     @id @default(uuid())
  name        String
  description String
  public      Boolean
  createdAt   DateTime
  userId      String?
  bookmarks   Bookmark[]
  User        User?      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
